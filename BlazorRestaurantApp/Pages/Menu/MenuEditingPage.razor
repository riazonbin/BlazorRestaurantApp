@page "/menu/edit-item/{id}"
@using BlazorRestaurantApp.Data;
@using BlazorRestaurantApp.Services;
@using MongoDB.Bson;
@inject FileSystemService fileSystemService
@inject MongoConnection mongoConnection
@inject NavigationManager navigationManager

<MudCard>
    <MudCardContent>
        <MudForm>
            <MudTextField @bind-Value="menuItem.Name" Label="Наименование" />
            <MudTextField @bind-Value="menuItem.Description" Label="Описание" />
            <MudTextField @bind-Value="menuItem.Price" Label="Цена" />

            <MudFileUpload T="IBrowserFile" OnFilesChanged="@HandleFileUpload">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                                Variant="Variant.Filled"
                                Color="Color.Primary"
                                StartIcon="@Icons.Material.Filled.CloudUpload"
                                for="@context">
                        Загрузить файл
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            <MudDivider></MudDivider>

            <MudImage Src="@imageData" alt="Menu Item Image" />

            <MudDivider></MudDivider>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@UpdateMenuItem">Обновить</MudButton>
        </MudForm>
    </MudCardContent>
</MudCard>



@code {
    private MenuItem menuItem = new MenuItem();
    private IBrowserFile file;
    private string imageData;

    [Parameter]
    public string Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        // Retrieve the menu item from the database using the MongoDB.Driver package
        menuItem = await mongoConnection.FindMenuItemById(Id);
        imageData = GetImageSource(menuItem.ImageId);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        file = e.File;

        using var stream = file.OpenReadStream(2000000);
        var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        var imageDataBytes = memoryStream.ToArray();
        var base64ImageString = Convert.ToBase64String(imageDataBytes);

        imageData = $"data:{file.ContentType};base64,{base64ImageString}";
    }

    private async Task UpdateMenuItem()
    {
        if(file is not null)
        {
            // Upload the new image file to GridFS using the MongoDB.Driver package
            var newImageId = await fileSystemService.UpdateItemInDb(file.OpenReadStream(), menuItem, file.Name);
            menuItem.ImageId = newImageId;
        }
        mongoConnection.UpdateMenuItem(menuItem);
        // Redirect the user back to the menu page
        navigationManager.NavigateTo("/menu");
    }

    private string GetImageSource(ObjectId imageId)
    {
        try
        {
            // Retrieve the image data from the database using the MongoDB.Driver package
            var imageData = fileSystemService.DownloadItemFromDbByIdAsBytes(imageId);

            // Convert the image data to a base64-encoded string
            var base64Image = Convert.ToBase64String(imageData);

            // Return the image source string
            return $"data:image/png;base64,{base64Image}";
        }
        catch { return ""; }
    }
}

