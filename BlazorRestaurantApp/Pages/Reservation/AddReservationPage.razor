@page "/add-reservation"
@using BlazorRestaurantApp.Data;
@using BlazorRestaurantApp.Pages.Dialogs;
@using BlazorRestaurantApp.Services;

@inject ISnackbar Snackbar
@inject MongoConnection mongoConnection
@inject UserService userService
@inject IDialogService dialogService

<MudPaper MaxWidth="80%" Style="margin: 0 auto">
    <MudCard Style="padding: 24px">
        <MudForm @bind-IsValid="isFormValid">
            @{
                var firstDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                var lastDate = firstDate.AddMonths(1);

            }
            <MudDatePicker Label="Дата" PickerVariant="PickerVariant.Inline" 
                MinDate="@firstDate"
                MaxDate="@lastDate"
                Required="true" Error="@(!IsDateCorrect())" @bind-Date="_date" ErrorText="Укажите корректную дату!"
            />
            <MudTimePicker Label="Время" PickerVariant="PickerVariant.Inline" 
                Required="true" Error="@(!IsTimeCorrect())" 
                @bind-Time="_time" ErrorText="Укажите корректное время (бронирование доступно с 7:00 до 19:00 часов)">
            </MudTimePicker>
            <MudSelect Label="Число мест за столом" @bind-Value="_seats">
                <MudSelectItem Value="2"></MudSelectItem>
                <MudSelectItem Value="4"></MudSelectItem>
                <MudSelectItem Value="6"></MudSelectItem>
                <MudSelectItem Value="8"></MudSelectItem>
            </MudSelect>
            
            <br />

            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!IsDateTimeCorrect()" 
                    OnClick="ReserveTable" ButtonType="ButtonType.Button">Забронировать
                </MudButton>
            </MudCardActions>

        </MudForm>
    </MudCard>
</MudPaper>

@code {
    private DateTime? _date = DateTime.Today;
    private TimeSpan? _time = DateTime.Now.TimeOfDay;
    private int _seats = 2;
    private bool isFormValid = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Snackbar.Clear();
        return base.OnAfterRenderAsync(firstRender);
    }

    bool IsTimeCorrect()
    {
        if (_time > new TimeSpan(19, 0, 0) || _time < new TimeSpan(7, 0, 0))
        {
            return false;
        }
        if (_date.Value.AddMinutes(_time.Value.TotalMinutes) < DateTime.Now)
        {
            return false;
        }
        return true;
    }

    bool IsDateCorrect()
    {
        if (DateTime.Today.Date > _date.Value || _date.Value.AddMinutes(_time.Value.TotalMinutes) < DateTime.Now)
        {
            return false;
        }
        return true;
    }

    bool IsDateTimeCorrect()
    {
        if(IsDateCorrect() && IsTimeCorrect())
        {
            return true;
        }
        return false;
    }

    async Task ReserveTable()
    {
        if (!IsDateTimeCorrect())
        {
            Snackbar.Add("Бронирование не доступно на прошедшее время", Severity.Error);
            return;
        }

        var date = _date.Value.AddMinutes(_time.Value.TotalMinutes);

        var availableTable = await mongoConnection.GetAvailableTable(userService.currentUser.Id, _seats, date);

        if(availableTable is null)
        {
            Snackbar.Add("Свободных столиков нет на это время!", Severity.Error);
            return;
        }



        await mongoConnection.ReserveTable(availableTable.TableNumber, userService.currentUser.Id, date);

        await OpenDialog(availableTable);

    }

    private async Task OpenDialog(Table availableTable)
    {
        var options = new DialogOptions { CloseButton = false, CloseOnEscapeKey = false };
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"{availableTable.TableNumber}");
        var dialog = await dialogService.ShowAsync<AddedReservationDialog>("Бронирование", parameters, options);

        var result = await dialog.Result;
    }
}
