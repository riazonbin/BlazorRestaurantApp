@page "/cart"
@using BlazorRestaurantApp.Data
@using BlazorRestaurantApp.Services;
@using MongoDB.Bson;
@inject MongoConnection mongoConnection
@inject UserService userService
@inject ILocalStorageService localStorageService;
@inject ISnackbar Snackbar

@if(userService.currentUser is null)
{
    return;
}


<MudContainer>

    @if (currentCart.Items.Count == 0 || currentCart is null)
    {
        <MudAlert Severity="Severity.Info">Ваша корзина пуста.</MudAlert>
    }
    else
    {
        <MudTable Items="currentCart.Items" Dense="true" Outlined="true" ContainerClass="mt-4">
            <HeaderContent>
                <MudTh>Блюдо</MudTh>
                <MudTh>Стоимость за единицу</MudTh>
                <MudTh>Количество</MudTh>
                <MudTh>Общая стоимость</MudTh>
                <MudTh>Действия</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Блюдо">@context.MenuItem.Name</MudTd>
                <MudTd DataLabel="Стоимость за единицу">@context.MenuItem.Price.ToString("C")</MudTd>
                <MudTd DataLabel="Количество">@context.Quantity</MudTd>
                <MudTd DataLabel="Общая стоимость">@((context.MenuItem.Price * context.Quantity).ToString("C"))</MudTd>
                <MudTd DataLabel="Действия">
                    <MudButton Icon="Icons.Outlined" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" 
                    OnClick="(() => AddItemCount(context.MenuItem))">
                        +1
                    </MudButton>

                    <MudButton Icon="Icons.Outlined" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small"
                    OnClick="(() => LowerItemCount(context.MenuItem))">
                        -1
                    </MudButton>

                    <MudButton Icon="Icons.Outlined.Remove" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                    OnClick="(() => DeleteItemFromCart(context.MenuItem))">
                        Удалить
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudDivider />

        <MudText Typo="Typo.h5" Class="mt-4">Итого: @currentCart.Items.Sum(i => i.MenuItem.Price * i.Quantity).ToString("C")</MudText>

        <br />

            <MudNumericField T="int" @bind-Value="tableNumber" Min="1" Max="40" Label="Номер стола" Error="@(!IsTableAvailable().Result)" ErrorText="Столик занят" Clearable 
            Style="width: 20%" HelperText="1-40"></MudNumericField>
        
        <br />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async => AddOrder())" Class="mt-4">Оплатить заказ</MudButton>
    }
</MudContainer>

@code {
    private Cart currentCart = new Cart();
    private int tableNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        await CheckForUserCart();
    }

    void AddItemCount(MenuItem menuItem)
    {
        mongoConnection.AddItemToUserCart(currentCart, menuItem);
        StateHasChanged();
    }

    void LowerItemCount(MenuItem menuItem)
    {
        mongoConnection.LowerCountOfItemInUserCart(currentCart, menuItem);
        StateHasChanged();
    }

    void DeleteItemFromCart(MenuItem menuItem)
    {
        mongoConnection.DeleteItemFromUserCart(currentCart, menuItem);
        StateHasChanged();
    }

    async Task CheckForUserCart()
    {
        if(userService.currentUser is null)
        {
            return;
        }
        currentCart = await mongoConnection.GetUserCart(userService.currentUser.Id);
    }

    async Task AddOrder()
    {
        if(await IsTableAvailable())
        {
            await mongoConnection.AddOrder(currentCart, tableNumber);
            return;
        }
        Snackbar.Add("Столик уже занят!", Severity.Error);
    }

    async Task<bool> IsTableAvailable()
    {
        if(await mongoConnection.IsTableAvailable(tableNumber, userService.currentUser.Id))
        {
            return true;
        }
        return false;
    }
}