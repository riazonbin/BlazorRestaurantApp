@using BlazorRestaurantApp.Enums;
@using BlazorRestaurantApp.Services;
@using BlazorRestaurantApp.Data;
@using Majorsoft.Blazor.Components.Timer;
@using System.ComponentModel.DataAnnotations;
@inject MongoConnection mongoConnection;
@inject UserService userService;
@inject TimerService timerService;

@if (ordersList.Count == 0 || ordersList is null)
{
            <MudAlert Severity="Severity.Info">История заказов пуста</MudAlert>
    return;
}

<MudTable @ref="@_table" Items="ordersList" Dense="true" Outlined="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Ваша история заказов</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Заказ</MudTh>
        <MudTh>Когда заказан</MudTh>
        <MudTh>Когда доставлен</MudTh>
        <MudTh>Общая стоимость</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Заказ">@context.Id</MudTd>
        <MudTd DataLabel="Когда заказан">@context.OrderStartTime</MudTd>
        <MudTd DataLabel="Когда заказан">@context.OrderEndTime</MudTd>
        <MudTd DataLabel="Общая стоимость">@(context.CartItems.Sum(i => i.MenuItem.Price * i.Quantity).ToString("C"))</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager HidePagination RowsPerPageString="Кол-во строк в таблице" InfoFormat="{first_item}-{last_item} из {all_items}" />
        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4"/>
    </PagerContent>
</MudTable>

    <MudHidden>
        <Majorsoft.Blazor.Components.Timer.AdvancedTimer AutoStart="true" IntervalInMilisec="5000" 
        OnIntervalElapsed="@GetCustomersOrders" Occurring="Times.Infinite()"></Majorsoft.Blazor.Components.Timer.AdvancedTimer>
    </MudHidden>

    @code {

    List<Order> ordersList = new List<Order>();
    private MudTable<Order> _table;


    protected override async Task OnInitializedAsync()
    {
        await GetCustomersOrders();
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    public async Task GetCustomersOrders()
    {
        ordersList = await mongoConnection.GetCustomersOrders(userService.currentUser.Id);
        ordersList = ordersList.Where(x => x.Status == Enums.OrderStatuses.IsDelivered).ToList();
    }

}