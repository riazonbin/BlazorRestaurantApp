@using BlazorRestaurantApp.Data;
@using BlazorRestaurantApp.Enums;
@using BlazorRestaurantApp.Services;
@using MongoDB.Bson;
@using System.ComponentModel.DataAnnotations;
@inject MongoConnection mongoConnection
@inject FileSystemService fileSystemService
@inject NavigationManager navigationManager
@inject UserService userService
@inject ISnackbar Snackbar;

<MudExpansionPanels>
    <MudExpansionPanel Text="Фильтр">
        <MudSelect T="DishTypes" Label="Тип блюда" @bind-Value="@(selectedDishTypeFilter)" Direction="Direction.Right" SelectedValuesChanged="@FilterMenuItems">
            @foreach (DishTypes typeOfDish in Enum.GetValues(typeof(DishTypes)).Cast<DishTypes>())
            {
                var valueName = typeof(DishTypes).GetMember(typeOfDish.ToString())[0]
                .GetCustomAttributes(typeof(DisplayAttribute), false)
                .OfType<DisplayAttribute>()
                .FirstOrDefault()?.Name;
                    <MudSelectItem Value="@typeOfDish">@valueName</MudSelectItem>
            }
        </MudSelect>

        <MudTextField T="string" Label="Наименование блюда" @bind-Value="@selectedDishNameFilter" Immediate TextChanged="@FilterMenuItems"></MudTextField>

        <br />

        <MudButton Variant="Variant.Filled" OnClick="ResetAllFilters">Сбросить фильтр</MudButton>

    </MudExpansionPanel>
</MudExpansionPanels>

<br />
<MudDivider></MudDivider>

<MudGrid Spacing="5"> 
    @foreach (var menuItem in menuItems)
    {
        string imageData = "";
        if (menuItem.ImageId != ObjectId.Empty)
        {
            imageData = GetImageSource(menuItem.ImageId);
        }
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Style="min-height:550px; min-width: 250px;">
                <MudCardMedia Image="@imageData"/>
                <MudCardContent>
                    <h3>@menuItem.Name</h3>
                    <p>@menuItem.Description</p>
                    <h4>@menuItem.Price.ToString("C") / @menuItem.Weight грамм</h4>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => AddItemToCart(menuItem))">Добавить в корзину</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }

</MudGrid>

@code {
    private DishTypes selectedDishTypeFilter = DishTypes.None;
    private string selectedDishNameFilter = "";

    private List<MenuItem> menuItems = new List<MenuItem>();

    protected async override Task OnInitializedAsync()
    {
        menuItems = await mongoConnection.GetAllMenuItems();
        await CheckForUserCart();
        await base.OnInitializedAsync();
    }

    void FilterMenuItems()
    {
        ResetFilter();
        if (selectedDishTypeFilter == DishTypes.None && selectedDishNameFilter == "")
        {
            return;
        }

        if (selectedDishTypeFilter == DishTypes.None)
        {
            menuItems = menuItems.Where(x => x.Name.ToLower().Contains(selectedDishNameFilter.ToLower())).ToList();
        }
        else if (selectedDishNameFilter == "")
        {
            menuItems = menuItems.Where(x => x.DishType == selectedDishTypeFilter).ToList();
        }
        else
        {
            menuItems = menuItems.Where(x => x.Name.ToLower().Contains(selectedDishNameFilter.ToLower())).ToList();
            menuItems = menuItems.Where(x => x.DishType == selectedDishTypeFilter).ToList();
        }

        StateHasChanged();
    }

    async void ResetFilter()
    {
        menuItems = await mongoConnection.GetAllMenuItems();
    }

    async Task CheckForUserCart()
    {
        var currentUserCart = await mongoConnection.GetUserCart(userService.currentUser.Id);
        if(currentUserCart is null)
        {
            await mongoConnection.CreateUserCart(userService.currentUser.Id);
        }
    }

    async Task AddItemToCart(MenuItem menuItem)
    {
        var currentUserCart = await mongoConnection.GetUserCart(userService.currentUser.Id);
        mongoConnection.AddItemToUserCart(currentUserCart, menuItem);
        Snackbar.Add("Блюдо добавлено в корзину", Severity.Info);
    }

    async void ResetAllFilters()
    {
        selectedDishNameFilter = "";
        selectedDishTypeFilter = DishTypes.None;

        menuItems = await mongoConnection.GetAllMenuItems();
    }

    private string GetImageSource(ObjectId imageId)
    {
        try
        {
            if (imageId != ObjectId.Empty)
            {
                var imageData = fileSystemService.DownloadItemFromDbByIdAsBytes(imageId);

                var base64Image = Convert.ToBase64String(imageData);

                return $"data:image/png;base64,{base64Image}";
            }
            return "";
        }
        catch { return ""; }

    }
}