@using BlazorRestaurantApp.Data;
@using BlazorRestaurantApp.Services;
@using Majorsoft.Blazor.Components.Timer;
@using MudBlazor
@inject ILocalStorageService localStorageService;
@inject UserService userService;
@inject MongoConnection mongoConnection;
@inject NavigationManager navigationManager;
@inject TimerService timerService;
@inherits LayoutComponentBase

<PageTitle>Ресторан</PageTitle>

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="8">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())" />
    <MudText Typo="Typo.h6" Class="px-4">
        <MudImage Src="logo/restaurantLogo.png" Width="150" Height="100"></MudImage> 
    </MudText>

        <MudSpacer />
        @if (userService.currentUser is not null)
        {
                <a @onclick="@LogOut">Выйти</a>
                <a href="/personalPage">
                    <MudIconButton Edge="Edge.End">
                        <MudAvatar Color="Color.Secondary">@userService.currentUser?.Firstname[0]</MudAvatar>
                    </MudIconButton>
                </a>
        }

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="8">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@*<MudHidden>
    <Majorsoft.Blazor.Components.Timer.AdvancedTimer AutoStart="true" IntervalInMilisec="10000" 
    OnIntervalElapsed="@UpdateOrdersStatuses" Occurring="Times.Infinite()"></Majorsoft.Blazor.Components.Timer.AdvancedTimer>
</MudHidden>*@

@code
{
    protected override async Task OnInitializedAsync()
    {
        User potentialUser = await localStorageService.GetAsync<User>("CurrentUser");
        if (potentialUser is not null)
        {
            userService.currentUser = potentialUser;
            if (userService.currentUser.Role == Enums.UserRoles.Customer)
            {
                await CheckForUserCart();

            }
        }

        if (!mongoConnection.IsDefaultManagerExists())
        {
            mongoConnection.AddDefaultManagerToDataBase();
        }

        await mongoConnection.DeleteOldReservations();

        timerService.Elapsed = null;
        timerService.Elapsed += UpdateOrdersStatuses;
    }

    async Task CheckForUserCart()
    {
        var currentUserCart = await mongoConnection.GetUserCart(userService.currentUser.Id);
        if (currentUserCart is null)
        {
            await mongoConnection.CreateUserCart(userService.currentUser.Id);
        }
    }

    void LogOut()
    {
        userService.currentUser = null;

        localStorageService.RemoveAsync("CurrentUser");

        navigationManager.NavigateTo("/");
    }

    async void UpdateOrdersStatuses()
    {
        await mongoConnection.UpdateOrdersStatuses();
    }

    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
